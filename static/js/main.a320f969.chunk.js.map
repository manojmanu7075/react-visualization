{"version":3,"sources":["store/actions.js","store/sagas/ApiErrors.js","store/api/index.js","store/sagas/MetricsApi.js","store/sagas/index.js","store/reducers/Weather.js","store/reducers/Metrics.js","components/Chip.js","components/Weather.js","components/Header.js","components/Wrapper.js","views/Visualization.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["API_ERROR","FETCH_METRICS","METRICS_RECEIVED","FETCH_PAST_METRICS_DATA","PAST_METRICS_DATA_RECEIVED","apiErrorReceived","watchApiError","action","regenerator_default","a","wrap","_context","prev","next","call","toast","error","concat","stop","_marked","_context2","takeEvery","actions","_marked2","ApiErrors","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_ref","query","definition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","fetchMetrics","_ref2","Object","asyncToGenerator","mark","_callee","_ref3","data","rest","gql","_templateObject","sent","objectWithoutProperties","abrupt","_objectSpread","apply","this","arguments","fetchPastData","_ref4","_callee2","metricName","_ref5","console","log","_templateObject2","Date","getTime","_x","api","subscribeMetricsData","_ref6","_callee3","subscription","_context3","subscribe","_templateObject3","watchApiCalls","put","type","errors","message","cancel","metrics","getMetrics","MetricsApi_marked","newData","metricsData","graphData","getMeasurements","map","item","_objectSpread2","metric","at","value","MetricsApi_objectSpread","defineProperty","getHours","getMinutes","keys","key","MetricsApi_marked2","_marked3","MetricsApi","sagas","toConsumableArray","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","handlers","state","c","getWeatherForLocation","reducers_Weather","length","undefined","handler","currentValue","tubingPressure","casingPressure","oilTemp","flareTemp","waterTemp","injValveOpen","_handlers","Metrics_objectSpread","_objectSpread3","Metrics","withStyles","theme","root","background","palette","secondary","main","label","color","primary","Chip","createClient","url","getWeather","_state$weather","weather","components_Weather","react_default","createElement","urql_es","Weather_Weather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","_useSelector","useSelector","_useQuery","useQuery","variables","result","slicedToArray","fetching","useEffect","LinearProgress","components_Chip","useStyles","makeStyles","grow","flexGrow","Header","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","animatedComponents","makeAnimated","connect","onLoad","subscribeUpdates","then","sub","newMeasurement","loadPastData","props","_React$useState","React","useState","_React$useState2","selected","setSelected","useEffectOnce","m","Card","CardHeader","title","subheader","CardContent","style","minHeight","Grid","container","s","xs","react_select_browser_esm","components","isMulti","onChange","event","es6","width","margin","top","right","bottom","left","indexOf","dot","activeDot","yAxisId","dataKey","stroke","tickSize","unit","orientation","store","rootReducer","combineReducers","weatherReducer","metricsReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","forEach","run","createMuiTheme","typography","useNextVariants","App","MuiThemeProvider","CssBaseline","es","lib","views_Visualization","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a320f969.chunk.js","sourcesContent":["export const API_ERROR = 'EVENT/API_ERROR_RECEIVED'\nexport const WEATHER_DATA_RECEIVED = 'EVENT/WEATHER_DATA_RECEIVED'\n\nexport const FETCH_METRICS = 'COMMAND/FETCH_METRICS'\nexport const METRICS_RECEIVED = 'EVENT/METRICS_RECEIVED'\n\nexport const FETCH_METRICS_DATA = 'COMMAND/FETCH_METRICS_DATA'\nexport const METRICS_DATA_RECEIVED = 'EVENT/METRICS_DATA_RECEIVED'\n\nexport const FETCH_PAST_METRICS_DATA = 'COMMAND/FETCH_PAST_METRICS_DATA'\nexport const PAST_METRICS_DATA_RECEIVED = 'EVENT/PAST_METRICS_DATA_RECEIVED'\n","import { takeEvery, call } from 'redux-saga/effects'\nimport * as actions from '../actions'\nimport { toast } from 'react-toastify'\n\nfunction* apiErrorReceived(action) {\n    yield call(toast.error, `Error Received: ${action.error}`)\n}\n\nfunction* watchApiError() {\n    yield takeEvery(actions.API_ERROR, apiErrorReceived)\n}\n\nexport default [watchApiError]\n","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nimport gql from 'graphql-tag'\n\n// Create an http link:\nconst httpLink = new HttpLink({\n    uri: 'https://react.eogresources.com/graphql',\n})\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n    uri: `ws://react.eogresources.com/graphql`,\n    options: {\n        reconnect: true,\n    },\n})\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query)\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        )\n    },\n    wsLink,\n    httpLink\n)\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n    cache,\n    link,\n})\n\nconst fetchMetrics = async () => {\n    const { data, ...rest } = await client.query({\n        query: gql`\n            {\n                getMetrics\n            }\n        `,\n    })\n    return { data, ...rest }\n}\n\nconst fetchPastData = async metricName => {\n    console.log(metricName)\n    const { data, ...rest } = await client.query({\n        query: gql`\n      {\n        getMeasurements(\n          input: {\n            metricName: \"${metricName}\"\n            after: ${new Date(new Date().getTime() - 30 * 60000).getTime()}\n          }\n        ) {\n          at\n          metric\n          value\n        }\n      }\n    `,\n    })\n    return { data, ...rest }\n}\n\nconst subscribeMetricsData = async () => {\n    const subscription = await client.subscribe({\n        query: gql`\n            subscription {\n                newMeasurement {\n                    at\n                    unit\n                    value\n                    metric\n                }\n            }\n        `,\n    })\n    return subscription\n}\n\nexport default { fetchMetrics, subscribeMetricsData, fetchPastData }\n","import { takeEvery, call, put, cancel } from 'redux-saga/effects'\nimport * as actions from '../actions'\nimport api from '../api'\n\nfunction* fetchMetrics(action) {\n    const { data, error } = yield call(api.fetchMetrics)\n    if (error) {\n        yield put({ type: actions.API_ERROR, error: error.errors[0].message })\n        yield cancel()\n    }\n    yield put({ type: actions.METRICS_RECEIVED, metrics: data.getMetrics })\n}\n\nfunction* fetchPastData(action) {\n    const { data } = yield call(api.fetchPastData, action.metricName)\n    const newData = data.getMeasurements\n    let metricsData = {}\n    newData.map(item => {\n        const { metric, at, value } = item\n        metricsData = {\n            ...metricsData,\n            [at]: {\n                ...metricsData[at],\n                [metric]: value,\n                at: `${new Date(at).getHours() % 12 || 12}-${new Date(\n                    at\n                ).getMinutes()}`,\n            },\n        }\n        return null\n    })\n    const graphData = Object.keys(metricsData).map(key => metricsData[key])\n    yield put({ type: actions.PAST_METRICS_DATA_RECEIVED, graphData })\n}\n\nfunction* watchApiCalls() {\n    yield takeEvery(actions.FETCH_METRICS, fetchMetrics)\n    // yield takeEvery(actions.FETCH_METRICS_DATA, subscribeMetricsData);\n    yield takeEvery(actions.FETCH_PAST_METRICS_DATA, fetchPastData)\n}\n\nexport default [watchApiCalls]\n","import ApiErrors from './ApiErrors'\nimport MetricsApi from './MetricsApi'\n\nexport default [...ApiErrors, ...MetricsApi]\n","import * as actions from '../actions'\n\nconst initialState = {\n    temperatureinCelsius: null,\n    temperatureinFahrenheit: null,\n    description: '',\n    locationName: '',\n}\n\nconst toF = c => (c * 9) / 5 + 32\n\nconst weatherDataRecevied = (state, action) => {\n    const { getWeatherForLocation } = action\n    const {\n        description,\n        locationName,\n        temperatureinCelsius,\n    } = getWeatherForLocation\n\n    return {\n        temperatureinCelsius,\n        temperatureinFahrenheit: toF(temperatureinCelsius),\n        description,\n        locationName,\n    }\n}\n\nconst handlers = {\n    [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied,\n}\n\nexport default (state = initialState, action) => {\n    const handler = handlers[action.type]\n    if (typeof handler === 'undefined') return state\n    return handler(state, action)\n}\n","import * as actions from '../actions'\n\nconst initialState = {\n    metrics: [],\n    metricsData: {},\n    graphData: [],\n    currentValue: {\n        tubingPressure: 0,\n        casingPressure: 0,\n        oilTemp: 0,\n        flareTemp: 0,\n        waterTemp: 0,\n        injValveOpen: 0,\n    },\n}\n\nconst metricsListReceived = (state, action) => {\n    const { metrics } = action\n    return {\n        ...state,\n        metrics,\n    }\n}\n\nconst metricsDataReceived = (state, action) => {\n    const newData = action.metrics\n    const { metric, at, value } = newData\n    const currentValue = { ...state.currentValue, [metric]: value }\n    const { metricsData } = state\n    const graphData = Object.keys(metricsData).map(key => metricsData[key])\n    return {\n        ...state,\n        metricsData: {\n            ...metricsData,\n            [at]: {\n                ...metricsData[at],\n                [metric]: value,\n                at: `${new Date(at).getHours() % 12 || 12}-${new Date(\n                    at\n                ).getMinutes()}`,\n            },\n        },\n        graphData,\n        currentValue,\n    }\n}\n\nconst metricsPastDataReceived = (state, action) => {\n    const { graphData, metricsData } = action\n    console.log(graphData)\n    return {\n        ...state,\n        metricsData,\n        graphData,\n    }\n}\n\nconst handlers = {\n    [actions.METRICS_RECEIVED]: metricsListReceived,\n    [actions.METRICS_DATA_RECEIVED]: metricsDataReceived,\n    [actions.PAST_METRICS_DATA_RECEIVED]: metricsPastDataReceived,\n}\n\nexport default (state = initialState, action) => {\n    const handler = handlers[action.type]\n    if (typeof handler === 'undefined') return state\n    return handler(state, action)\n}\n","import Chip from '@material-ui/core/Chip'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst cardStyles = theme => ({\n    root: {\n        background: theme.palette.secondary.main,\n    },\n    label: {\n        color: theme.palette.primary.main,\n    },\n})\nexport default withStyles(cardStyles)(Chip)\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { Provider, createClient, useQuery } from 'urql'\nimport { useGeolocation } from 'react-use'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Chip from './Chip'\n\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql',\n})\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`\n\nconst getWeather = state => {\n    const { temperatureinFahrenheit, description, locationName } = state.weather\n    return {\n        temperatureinFahrenheit,\n        description,\n        locationName,\n    }\n}\n\nexport default () => {\n    return (\n        <Provider value={client}>\n            <Weather />\n        </Provider>\n    )\n}\n\nconst Weather = () => {\n    const getLocation = useGeolocation()\n    // Default to houston\n    const latLong = {\n        latitude: getLocation.latitude || 29.7604,\n        longitude: getLocation.longitude || -95.3698,\n    }\n    const dispatch = useDispatch()\n    const { temperatureinFahrenheit, description, locationName } = useSelector(\n        getWeather\n    )\n\n    const [result] = useQuery({\n        query,\n        variables: {\n            latLong,\n        },\n    })\n    const { fetching, data, error } = result\n    useEffect(() => {\n        if (error) {\n            dispatch({ type: actions.API_ERROR, error: error.message })\n            return\n        }\n        if (!data) return\n        const { getWeatherForLocation } = data\n        dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation })\n    }, [dispatch, data, error])\n\n    if (fetching) return <LinearProgress />\n\n    return (\n        <Chip\n            label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`}\n        />\n    )\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Weather from './Weather'\n\nconst useStyles = makeStyles({\n    grow: {\n        flexGrow: 1,\n    },\n})\n\nexport default () => {\n    const classes = useStyles()\n\n    const name = \"Manoj Telukuntla's\"\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography\n                    variant=\"h6\"\n                    color=\"inherit\"\n                    className={classes.grow}\n                >\n                    {name} EOG React Visualization Assessment\n                </Typography>\n                <Weather />\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        background: theme.palette.background.main,\n        height: '100vh',\n    },\n}))\n\nexport default ({ children }) => {\n    const classes = useStyles()\n    return <div className={classes.wrapper}>{children}</div>\n}\n","import React from 'react'\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Typography,\n    Grid,\n} from '@material-ui/core'\nimport { connect } from 'react-redux'\nimport * as actions from '../store/actions'\nimport { useEffectOnce } from 'react-use'\nimport Select from 'react-select'\nimport makeAnimated from 'react-select/animated'\nimport { LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts'\nimport api from '../store/api'\n\nconst animatedComponents = makeAnimated()\n\nconst Visualization = props => {\n    const { onLoad, metrics, currentValue, subscribeUpdates } = props\n    const [selected, setSelected] = React.useState([])\n    useEffectOnce(() => {\n        onLoad()\n        // ['oilTemp', 'tubingPressure', 'casingPressure', 'flareTemp', 'waterTemp', 'injValveOpen'].map(metricName => {\n        //     // loadPastData(metricName);\n        //     return null;\n        // });\n        subscribeUpdates()\n    })\n    const options = metrics.map(m => ({ label: m, value: m }))\n    const data = props.graphData\n    return (\n        <Card>\n            <CardHeader title=\"Plot\" subheader=\"Choose from Input\" />\n            <CardContent style={{ minHeight: 500 }}>\n                <Grid container>\n                    {selected.map((s, key) => (\n                        <Grid key={key} item xs={2}>\n                            <Card>\n                                <CardHeader title={s} />\n                                <CardContent>\n                                    <Typography variant=\"h3\">\n                                        {currentValue[s]}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n\n                <Select\n                    options={options}\n                    components={animatedComponents}\n                    isMulti\n                    onChange={event => {\n                        setSelected(event ? event.map(item => item.value) : [])\n                    }}\n                />\n                <LineChart\n                    width={800}\n                    height={500}\n                    data={data}\n                    margin={{ top: 30, right: 30, bottom: 5, left: 50 }}\n                >\n                    {selected.indexOf('oilTemp') > -1 && (\n                        <Line\n                            type=\"monotone\"\n                            dot={false}\n                            activeDot={false}\n                            yAxisId={2}\n                            dataKey=\"oilTemp\"\n                            stroke=\"#FF0000\"\n                        />\n                    )}\n                    {selected.indexOf('injValveOpen') > -1 && (\n                        <Line\n                            type=\"monotone\"\n                            dot={false}\n                            activeDot={false}\n                            yAxisId={0}\n                            dataKey=\"injValveOpen\"\n                            stroke=\"#1100FF\"\n                        />\n                    )}\n                    {selected.indexOf('tubingPressure') > -1 && (\n                        <Line\n                            type=\"monotone\"\n                            dot={false}\n                            activeDot={false}\n                            yAxisId={1}\n                            dataKey=\"tubingPressure\"\n                            stroke=\"#00770C\"\n                        />\n                    )}\n                    {selected.indexOf('casingPressure') > -1 && (\n                        <Line\n                            type=\"monotone\"\n                            dot={false}\n                            activeDot={false}\n                            yAxisId={1}\n                            dataKey=\"casingPressure\"\n                            stroke=\"#B900AD\"\n                        />\n                    )}\n                    {selected.indexOf('flareTemp') > -1 && (\n                        <Line\n                            type=\"monotone\"\n                            dot={false}\n                            activeDot={false}\n                            yAxisId={2}\n                            dataKey=\"flareTemp\"\n                            stroke=\"#C7A600\"\n                        />\n                    )}\n                    {selected.indexOf('waterTemp') > -1 && (\n                        <Line\n                            type=\"monotone\"\n                            dot={false}\n                            activeDot={false}\n                            yAxisId={2}\n                            dataKey=\"waterTemp\"\n                            stroke=\"#3C392E\"\n                        />\n                    )}\n                    <XAxis dataKey=\"at\" tickSize={10} />\n                    <YAxis\n                        yAxisId={0}\n                        unit=\"%\"\n                        orientation=\"left\"\n                        stroke=\"#88f4d8\"\n                    />\n                    <YAxis\n                        yAxisId={1}\n                        unit=\"PSI\"\n                        orientation=\"left\"\n                        stroke=\"#82ca9d\"\n                    />\n                    <YAxis\n                        yAxisId={2}\n                        unit=\"F\"\n                        orientation=\"left\"\n                        stroke=\"#82ca9d\"\n                    />\n\n                    <Tooltip />\n                </LineChart>\n            </CardContent>\n        </Card>\n    )\n}\n\nconst mapDispatch = dispatch => ({\n    onLoad: () => {\n        dispatch({\n            type: actions.FETCH_METRICS,\n        })\n    },\n    subscribeUpdates: () => {\n        api.subscribeMetricsData().then(sub => {\n            sub.subscribe(({ data }) => {\n                dispatch({\n                    type: actions.METRICS_DATA_RECEIVED,\n                    metrics: data.newMeasurement,\n                })\n            })\n        })\n    },\n    loadPastData: metricName => {\n        dispatch({\n            type: actions.FETCH_PAST_METRICS_DATA,\n            metricName,\n        })\n    },\n})\n\nconst mapState = state => ({\n    metrics: state.metrics.metrics,\n    graphData: state.metrics.graphData,\n    currentValue: state.metrics.currentValue,\n})\n\nexport default connect(\n    mapState,\n    mapDispatch\n)(Visualization)\n","import React from 'react'\nimport createStore from './store'\nimport { Provider } from 'react-redux'\nimport { ToastContainer } from 'react-toastify'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport 'react-toastify/dist/ReactToastify.css'\nimport Header from \"./components/Header\";\nimport Wrapper from './components/Wrapper'\n// import NowWhat from \"./components/NowWhat\";\nimport Visualization from './views/Visualization'\n\nconst store = createStore()\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n    palette: {\n        primary: {\n            main: 'rgb(39,49,66)',\n        },\n        secondary: {\n            main: 'rgb(197,208,222)',\n        },\n        background: {\n            main: 'rgb(226,231,238)',\n        },\n    },\n})\n\nconst App = props => (\n    <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Provider store={store}>\n            <Wrapper>\n                <Header />\n\t\t\t\t{/*<NowWhat /> */}\n                <ToastContainer />\n                <Visualization />\n            </Wrapper>\n        </Provider>\n    </MuiThemeProvider>\n)\n\nexport default App\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport sagas from './sagas'\nimport weatherReducer from './reducers/Weather'\nimport metricsReducer from './reducers/Metrics'\n\nexport default () => {\n    const rootReducer = combineReducers({\n        weather: weatherReducer,\n        metrics: metricsReducer,\n    })\n\n    const composeEnhancers = composeWithDevTools({})\n    const sagaMiddleware = createSagaMiddleware()\n    const middlewares = applyMiddleware(sagaMiddleware)\n    const store = createStore(rootReducer, composeEnhancers(middlewares))\n\n    sagas.forEach(sagaMiddleware.run)\n\n    return store\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}